Usage: m4 [OPTION]... [FILE]...
Process macros in FILEs. If no FILE or if FILE is `-', stdin is read.

Prefixing some options with `no-' has the inverse effect.
For example, `--no-extensions'.

General:
      --help                   display this help and exit
  -v, --version                output version and exit
  -E, --fatal-warnings         stop execution after first warning
  -P, --prefix-builtins        prefix all builtins with `m4_'
  -Q, --quiet, --silent        suppress some warnings for builtins

Preprocessor:
  -D, --define=NAME[=VALUE]    define NAME has having VALUE, or empty
  -I, --include=DIRECTORY      append DIRECTORY to include path
  -s, --synclines              generate `#line NUM "FILE"' lines
  -U, --undefine=NAME          undefine NAME
  -m, --source-map=FILE        output a corresponding Source Map V3 into FILE
  -o, --output=FILE            output results to FILE instead of stdout

Limits:
      --extensions             enable extensions [default]
  -L, --nesting-limit=NUMBER   change artificial nesting limit [infinite]

Frozen state:
  -F, --freeze-state=FILE      produce a frozen state into FILE at end
  -R, --reload-state=FILE      reload a frozen state form FILE at start

Debugging:
  -d, --debug[=FLAGS]          set debug level, `aeq' if unspecified
      --debugfile[=FILE]       redirect debug and trace output to FILE
                                 (default stderr, discard if empty string)

FLAGS is any of:
  a   show actual arguments
  c   show before collect, after collect and after call
  e   show expansion
  f   say current input file name
  i   show changes in input files
  l   say current input line number
  p   show results of path searches
  q   quote values as necessary, with a or e flag
  t   trace for all macro calls, not only traceon'ed
  x   add a unique macro call id, useful with c flag
  V   shorthand for all of the above flags
